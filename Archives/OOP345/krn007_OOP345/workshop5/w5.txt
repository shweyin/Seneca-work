Script started on Thu 28 Dec 2017 07:15:19 PM EST
khshah2@matrix:~/OOP345/workshop5> whoami
khshah2
khshah2@matrix:~/OOP345/workshop5> cat w5.cpp Notifications.* Message.*
/* OOP345 Workshop 5
Name - Karan Shah
Student_Id: 129965166
Date - 28th Decemeber 2017*/

#include <iostream>
#include <fstream>
#include "Message.h"
#include "Notifications.h"

const char REC_DELIMITER = '\n';

w5::Notifications collect(std::ifstream& in, char recDelim) {
	w5::Notifications notifications;

	do {
		w5::Message message(in, recDelim);
		if (!message.empty())
			notifications += std::move(message);
	} while (in);

	return notifications;
}

int main(int argc, char* argv[]) {
	if (argc == 1) {
		std::cerr << argv[0] << ": missing file operand\n";
		return 1;
	}
	else if (argc != 2) {
		std::cerr << argv[0] << ": too many arguments\n";
		return 2;
	}
	std::ifstream file(argv[1]);
	if (!file) {
		std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n";
		return 3;
	}

	std::cout << "\nNotifications\n=============\n\n";
	w5::Notifications notifications = collect(file, REC_DELIMITER);

	notifications.display(std::cout);

	std::cout << "Press any key to continue ... ";
	std::cin.get();
}/* OOP345 Workshop 5
Name - Karan Shah
Student_Id: 129965166
Date - 28th Decemeber 2017*/

#include "Notifications.h"

using namespace w5;

Notifications::Notifications() {
	capacity = 10;
	messageTable = new Message[capacity];
	count = 0;
}

Notifications::Notifications(const Notifications& obj) {
	capacity = 10;
	messageTable = new Message[capacity];
	count = 0;
	count = obj.count;
	for (size_t i; i < count; i++) {
		messageTable[i] = obj.messageTable[i];
	}
}

Notifications& Notifications::operator=(const Notifications& obj) {
	capacity = 10;
	if (this != &obj) {
		if (count == 0 && obj.count == 0) {

		}
		else if (count == 0 && obj.count != 0) {
			messageTable = new Message[capacity];
			count = obj.count;
			for (size_t i = 0; i < count; i++) {
				messageTable[i] = obj.messageTable[i];
			}
		}
		else if (count != 0 && obj.count == 0) {
			delete[] messageTable;
			messageTable = nullptr;
			count = 0;
		}
		else if (count != 0 && obj.count != 0) {
			count = obj.count;
			for (size_t i = 0; i < count; i++) {
				messageTable[i] = obj.messageTable[i];
			}
		}
	}

	return *this;
}

Notifications::Notifications(Notifications&& rhs) {
	capacity = 10;
	count = 0;
	messageTable = new Message[capacity];
	delete[] messageTable;
	count = rhs.count;
	messageTable = rhs.messageTable;
	rhs.count = 0;
	rhs.messageTable = nullptr;
}

Notifications&& Notifications::operator=(Notifications&& obj) {
	if (this != &obj) {
		delete[] messageTable;
		count = obj.count;
		messageTable = obj.messageTable;
		obj.count = 0;
		obj.messageTable = nullptr;
	}
	return std::move(*this);
}

Notifications::~Notifications() {
	delete[] messageTable;
}

void Notifications::operator+=(const Message& msg) {
	capacity = 10;
	if (count == 0) {
		messageTable = new Message[capacity];
	}
	if (count < capacity) {
		messageTable[count] = msg;
		count++;
	}
}

void Notifications::display(std::ostream& os) const {
	for (size_t i = 0; i < count; i++) {
		messageTable[i].display(os);
		os << "\n";
	}
}/* OOP345 Workshop 5
Name - Karan Shah
Student_Id: 129965166
Date - 28th Decemeber 2017*/

#pragma once
#include "Message.h"

namespace w5 {

	class Notifications {
		Message* messageTable;
		size_t count;
		int capacity;
	public:
		Notifications();
		Notifications(const Notifications&);
		Notifications& operator=(const Notifications&);
		Notifications(Notifications&&);
		Notifications&& operator=(Notifications&&);
		~Notifications();
		void operator+=(const Message& msg);
		void display(std::ostream& os) const;
	};
}
/* OOP345 Workshop 5
Name - Karan Shah
Student_Id: 129965166
Date - 28th Decemeber 2017*/

#include "Message.h"
#include <iostream>
#include <string>
#include <fstream>
using namespace w5;


Message::Message() {
	user = '\n';
	tweet = '\n';
	reply = '\n';
}


Message::Message(std::ifstream& in, char c) {
	std::string line;
	getline(in, line, '\n');
	//std::cout << "we here" << std::endl;
	auto cr = line.find('\r');
	if (cr != std::string::npos) {
		line.erase(cr);
	}
	std::cout << "line -->" << line << "<--\n";

	size_t i = 0;
	while (i < line.size() && line[i] != ' ') {
		user += line[i];
		i++;
	}
	i++;

	std::cout << "user" << user << "\n";
	if (i < line.size() && line[i] == '@') {
		i++;

		while (i < line.size() && line[i] != ' ') {
			reply += line[i];
			i++;
		}
		i++;
		std::cout << "reply=" << reply << "\n";
	}
	while (i < line.size()) {
		tweet += line[i];
		i++;
	}

}
bool Message::empty() const {
	return tweet.empty();
}

void Message::display(std::ostream& os) const {
	os << "User :" << user << "\n";

	if (!reply.empty()) {
		os << "Reply:" << reply << "\n";
	}

	os << "Tweet : " << tweet << "\n";
}/* OOP345 Workshop 5
Name - Karan Shah
Student_Id: 129965166
Date - 28th Decemeber 2017*/

#pragma once
#include <iostream>

namespace w5 {

	class Message {
		std::string user, tweet, reply;
	public:
		Message();
		Message(std::ifstream& in, char c);
		bool empty() const;
		void display(std::ostream&) const;
	};

}khshah2@matrix:~/OOP345/workshop5> g++ -o w5 -std=c++0x w5.cpp Notifications.cpp  Message.cpp 
khshah2@matrix:~/OOP345/workshop5> w5 w5_test.dat

Notifications
=============

line -->jim Workshop 5 is cool<--
userjim
line -->harry @jim working on workshop 5 now<--
userharry
reply=jim
line -->chris<--
userchris
line -->dave what the ^#$%!<--
userdave
line -->john @harry I'm done<--
userjohn
reply=harry
line --><--
user
User :jim
Tweet : Workshop 5 is cool

User :harry
Reply:jim
Tweet : working on workshop 5 now

User :dave
Tweet : what the ^#$%!

User :john
Reply:harry
Tweet : I'm done

Press any key to continue ... 
khshah2@matrix:~/OOP345/workshop5> exit
exit

Script done on Thu 28 Dec 2017 07:16:17 PM EST
